{
	"info": {
		"_postman_id": "c39c7beb-4d76-4f7d-8f2a-9b324f03367b",
		"name": "Pet-Store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26381736",
		"_collection_link": "https://www.postman.com/aviation-operator-14912782/workspace/pet-store-workspace/collection/26381736-c39c7beb-4d76-4f7d-8f2a-9b324f03367b?action=share&source=collection_link&creator=26381736"
	},
	"item": [
		{
			"name": "1. Pet",
			"item": [
				{
					"name": "1.1 Create New Pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" // verify Pet created sucess  status code is 200 ok\r",
									"pm.test(\" [1.Pet].[1.1 CreateNewPet].[1] Verify Data created  sucess with Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   });\r",
									"\r",
									"\r",
									"// 1-  Check ID \r",
									"// Check Id is exist \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[2] Verify  Petid is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"    console.log(JSON.parse(responseBody).id);\r",
									"});\r",
									"// Check Id not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[3] Verify Pet Id not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check Id data  type \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[4] Verify Pet ID Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).id); \r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.be.equal(\"number\")\r",
									"});\r",
									"\r",
									"//Check Id value as expected    \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[5] Verify  ID value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).id);\r",
									"    console.log(JSON.parse(request.data).id);\r",
									"    pm.expect( JSON.parse(responseBody).id).to.be.equal(JSON.parse(request.data).id) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// 2- Check category \r",
									"// Check category is exist   \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[6] Verify  category is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"category\")\r",
									"// Check category not null and not undefined\r",
									"}); \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[7] Verify category not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).category).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).category).to.not.be.equal(undefined);\r",
									"    });\r",
									"// Check category data  type\r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[8] Verify Pet ID Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).category); \r",
									"    pm.expect(typeof JSON.parse(responseBody).category).to.be.equal(\"object\")\r",
									"});\r",
									"\r",
									"\r",
									"// 3- Check category Id\r",
									"// Check categoryId is exist \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[9] Verify  categoryId is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.property(\"id\")\r",
									"    console.log(JSON.parse(responseBody).category.id);\r",
									"});\r",
									"// Check categoryId not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[10] Verify category Id not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check categoryId data  type\r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[11] Verify category ID Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).category.id); \r",
									"    pm.expect(typeof JSON.parse(responseBody).category.id).to.be.equal(\"number\")\r",
									"});\r",
									"// Check category Id value as Expected  \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[12] Verify category ID value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).category.id);\r",
									"    console.log(JSON.parse(request.data).category.id);\r",
									"    pm.expect( JSON.parse(responseBody).category.id).to.be.equal(JSON.parse(request.data).category.id) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// 4- Check Category name \r",
									"// Check categoryName is exist \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[13] Verify  categoryName is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.property(\"name\")\r",
									"    console.log(JSON.parse(responseBody).category.name);\r",
									"});\r",
									"// Check categoryName not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[14] Verify category Name not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check categoryName data  type\r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[15] Verify category ID Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).category.name); \r",
									"    pm.expect(typeof JSON.parse(responseBody).category.name).to.be.equal(\"string\")\r",
									"});\r",
									"// Check categoryName value as Expected \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[16] Verify category ID value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).category.name);\r",
									"    console.log(JSON.parse(request.data).category.name);\r",
									"    pm.expect( JSON.parse(responseBody).category.name).to.be.equal(JSON.parse(request.data).category.name) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// 5- Check Pet name \r",
									"// Check PetName is exist \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[17] Verify  PetName is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"name\")\r",
									"\r",
									"});\r",
									"// Check Pet not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[18] Verify Pet Name not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check PetName data  type\r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[19] Verify PetName Type is String \",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).name); \r",
									"    pm.expect(typeof JSON.parse(responseBody).name).to.be.equal(\"string\")\r",
									"});\r",
									"// Check PetName value as Expected \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[20] Verify PetName value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).name);\r",
									"    console.log(JSON.parse(request.data).name);\r",
									"    pm.expect( JSON.parse(responseBody).name).to.be.equal(JSON.parse(request.data).name) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// 6- Check Pet photoUrls \r",
									"// Check PetName is exist \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[21] Verify  photoUrls is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"photoUrls\")\r",
									"\r",
									"});\r",
									"// Check photoUrls not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[22] Verify photoUrls not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).photoUrls).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).photoUrls).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check photoUrls data  type\r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[23] Verify photoUrls Type is String \",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).photoUrls); \r",
									"    pm.expect(typeof JSON.parse(responseBody).photoUrls).to.be.equal(\"object\")\r",
									"});\r",
									"// Check photoUrls value as Expected    Q 1\r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[24] Verify photoUrls value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).photoUrls);\r",
									"    console.log(JSON.parse(request.data).photoUrls);\r",
									"    pm.expect( JSON.parse(responseBody).photoUrls[0]).to.be.equal(JSON.parse(request.data).photoUrls[0]) ;\r",
									"     pm.expect( JSON.parse(responseBody).photoUrls[1]).to.be.equal(JSON.parse(request.data).photoUrls[1]) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// 6- Check Tags  \r",
									"// Check Tags is exist \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[25] Verify  Tags is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"tags\")\r",
									"\r",
									"});\r",
									"// Check tags not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[26] Verify tags not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).tags).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).tags).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check tags data  type\r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[27] Verify tags Type is String \",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).tags); \r",
									"    pm.expect(typeof JSON.parse(responseBody).tags).to.be.equal(\"object\")\r",
									"});\r",
									"\r",
									"// Check tags have Id and Name \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[28] Verify tags have  Id and Name  \",function(){\r",
									"    console.log(JSON.parse(responseBody).tags); \r",
									"   const tags = JSON.parse(responseBody).tags;\r",
									"pm.expect(tags).to.be.an(\"array\");\r",
									"pm.expect(tags.length).to.be.greaterThan(0);\r",
									"pm.expect(tags[0]).to.be.an(\"object\");\r",
									"pm.expect(tags[0]).to.have.property(\"id\");\r",
									"pm.expect(tags[0]).to.have.property(\"name\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// 7- Check Tags Id\r",
									"// Check Tags id is exist \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[29] Verify  tags id  is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0]).to.have.property(\"id\")\r",
									"    console.log(JSON.parse(responseBody).tags[0]);\r",
									"});\r",
									"// Check Tags id not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[30] Verify Tags Id not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check tags  id data  type\r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[31] Verify tags ID Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).tags[0].id); \r",
									"    pm.expect(typeof JSON.parse(responseBody).tags[0].id).to.be.equal(\"number\")\r",
									"});\r",
									"// Check tags Id value as Expected  \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[32] Verify tags ID value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).tags[0].id);\r",
									"    console.log(JSON.parse(request.data).tags[0].id);\r",
									"    pm.expect( JSON.parse(responseBody).tags[0].id).to.be.equal(JSON.parse(request.data).tags[0].id) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// 8- Check Tags name\r",
									"// Check Tags id is exist \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[33] Verify  tags name  is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0]).to.have.property(\"name\")\r",
									"    console.log(JSON.parse(responseBody).tags[0]);\r",
									"});\r",
									"// Check Tags Name not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[34] Verify Tags Name not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check tags  name data  type\r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[35] Verify tags name Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).tags[0].name); \r",
									"    pm.expect(typeof JSON.parse(responseBody).tags[0].name).to.be.equal(\"string\")\r",
									"});\r",
									"// Check tags name value as Expected  \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[36] Verify tags name value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).tags[0].name);\r",
									"    console.log(JSON.parse(request.data).tags[0].name);\r",
									"    pm.expect( JSON.parse(responseBody).tags[0].name).to.be.equal(JSON.parse(request.data).tags[0].name) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// 9- Check Status \r",
									"// Check status  is exist \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[37] Verify Status is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"status\");\r",
									"});\r",
									"// Check Status not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[38] Verify  Status not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check  Status data  type\r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[39] Verify Status Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).status); \r",
									"    pm.expect(typeof JSON.parse(responseBody).status).to.be.equal(\"string\")\r",
									"});\r",
									"// Check Status value as Expected  \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[40] Verify status value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(request.data).status);\r",
									"    pm.expect( JSON.parse(responseBody).status).to.be.equal(JSON.parse(request.data).status) ;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									" //1-  Generate a random PetId number \r",
									"function generateRandomId(length = 5, chars = \"0123456789\") {\r",
									"  let result = \"\";\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    result += chars[Math.floor(Math.random() * chars.length)];\r",
									"  }\r",
									"  return result;\r",
									"}\r",
									"const generatedRandomPetId = generateRandomId();\r",
									"pm.collectionVariables.set(\"Petid\",generatedRandomPetId)\r",
									"\r",
									" // 2- Generate a random categoryid  \r",
									"function  generateRandomcategoryid(length = 3, chars = \"0123456789\") {\r",
									"  let result = \"\";\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    result += chars[Math.floor(Math.random() * chars.length)];\r",
									"  }\r",
									"  return result;\r",
									"}\r",
									"const categoryid = generateRandomcategoryid();\r",
									"pm.collectionVariables.set(\"categoryid\",categoryid)\r",
									"\r",
									"\r",
									"\r",
									"//3-  Generate a random category names \r",
									"function generateUniqueRandomString(length = 5, usedNames = [], options = {}) {\r",
									"  // Default options for flexibility\r",
									"  const defaults = {\r",
									"    excludeLetters: \"\", // Letters to exclude (e.g., 'o', 'l')\r",
									"  };\r",
									"  // Merge provided options with defaults\r",
									"  const combinedOptions = { ...defaults, ...options };\r",
									"  // Input validation\r",
									"  if (length < 1) {\r",
									"    throw new Error(\"Length must be at least 1.\");\r",
									"  }\r",
									"  // Create a set of all allowed characters (a-z, excluding specified ones)\r",
									"  const letters = \"abcdefghijklmnopqrstuvwxyz\".split(\"\").filter(\r",
									"    (char) => !combinedOptions.excludeLetters.includes(char)\r",
									"  );\r",
									"  // Function to generate a random character from allowed letters\r",
									"  const getRandomChar = () => letters[Math.floor(Math.random() * letters.length)];\r",
									"  // Generate a random string\r",
									"  let name = \"\";\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    name += getRandomChar();\r",
									"  }\r",
									"  // Keep generating until a unique name is found\r",
									"  while (usedNames.includes(name)) {\r",
									"    name = generateRandomString(length, usedNames); // Recursively call for uniqueness\r",
									"  }\r",
									"  usedNames.push(name); // Add the generated name to the used list for future uniqueness checks\r",
									"  return name;\r",
									"}\r",
									"const CategoryName = generateUniqueRandomString();\r",
									"pm.collectionVariables.set(\"CategoryName\",CategoryName)\r",
									"\r",
									"\r",
									"\r",
									"//4-  Generate a random Pet names \r",
									"function generateUniqueRandomStringPetName(length = 8, usedNames = [], options = {}) {\r",
									"  // Default options for flexibility\r",
									"  const defaults = {\r",
									"    excludeLetters: \"\", // Letters to exclude (e.g., 'o', 'l')\r",
									"  };\r",
									"  // Merge provided options with defaults\r",
									"  const combinedOptions = { ...defaults, ...options };\r",
									"  // Input validation\r",
									"  if (length < 1) {\r",
									"    throw new Error(\"Length must be at least 1.\");\r",
									"  }\r",
									"  // Create a set of all allowed characters (a-z, excluding specified ones)\r",
									"  const letters = \"abcdefghijklmnopqrstuvwxyz\".split(\"\").filter(\r",
									"    (char) => !combinedOptions.excludeLetters.includes(char)\r",
									"  );\r",
									"  // Function to generate a random character from allowed letters\r",
									"  const getRandomChar = () => letters[Math.floor(Math.random() * letters.length)];\r",
									"  // Generate a random string\r",
									"  let name = \"\";\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    name += getRandomChar();\r",
									"  }\r",
									"  // Keep generating until a unique name is found\r",
									"  while (usedNames.includes(name)) {\r",
									"    name = generateRandomString(length, usedNames); // Recursively call for uniqueness\r",
									"  }\r",
									"  usedNames.push(name); // Add the generated name to the used list for future uniqueness checks\r",
									"  return name;\r",
									"}\r",
									"const PetName = generateUniqueRandomStringPetName();\r",
									"pm.collectionVariables.set(\"PetName\",PetName)\r",
									"\r",
									"\r",
									"//5- Jenerate randon photoULR\r",
									" function generateRandomPhotoUrlName(length = 10, options = {}) {\r",
									"  // Default options for customization\r",
									"  const defaults = {\r",
									"    prefix: \"photo-\",\r",
									"    suffix: \".jpg\",\r",
									"    allowedChars: \"abcdefghijklmnopqrstuvwxyz0123456789-\",\r",
									"  };\r",
									"\r",
									"  // Merge provided options with defaults\r",
									"  const combinedOptions = { ...defaults, ...options };\r",
									"\r",
									"  // Function to get a random character from allowed characters\r",
									"  const getRandomChar = () => combinedOptions.allowedChars[Math.floor(Math.random() * combinedOptions.allowedChars.length)];\r",
									"\r",
									"  // Generate the random name\r",
									"  let name = combinedOptions.prefix;\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    name += getRandomChar();\r",
									"  }\r",
									"  name += combinedOptions.suffix;\r",
									"\r",
									"  return name;\r",
									"}\r",
									"const PhotoUrl = generateRandomPhotoUrlName();\r",
									" pm.collectionVariables.set(\"photoUrls\",PhotoUrl)\r",
									"\r",
									"\r",
									" // 6- Generate a random Tags is   \r",
									"function  generateRandomTagsId(length = 6, chars = \"0123456789\") {\r",
									"  let result = \"\";\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    result += chars[Math.floor(Math.random() * chars.length)];\r",
									"  }\r",
									"  return result;\r",
									"}\r",
									"const TagsId = generateRandomTagsId();\r",
									"pm.collectionVariables.set(\"tagsid\",TagsId)\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//7-  Generate a random Tags names \r",
									"function generateUniqueRandomTagsName(length = 9, usedNames = [], options = {}) {\r",
									"  // Default options for flexibility\r",
									"  const defaults = {\r",
									"    excludeLetters: \"\", // Letters to exclude (e.g., 'o', 'l')\r",
									"  };\r",
									"  // Merge provided options with defaults\r",
									"  const combinedOptions = { ...defaults, ...options };\r",
									"  // Input validation\r",
									"  if (length < 1) {\r",
									"    throw new Error(\"Length must be at least 1.\");\r",
									"  }\r",
									"  // Create a set of all allowed characters (a-z, excluding specified ones)\r",
									"  const letters = \"abcdefghijklmnopqrstuvwxyz\".split(\"\").filter(\r",
									"    (char) => !combinedOptions.excludeLetters.includes(char)\r",
									"  );\r",
									"  // Function to generate a random character from allowed letters\r",
									"  const getRandomChar = () => letters[Math.floor(Math.random() * letters.length)];\r",
									"  // Generate a random string\r",
									"  let name = \"\";\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    name += getRandomChar();\r",
									"  }\r",
									"  // Keep generating until a unique name is found\r",
									"  while (usedNames.includes(name)) {\r",
									"    name = generateUniqueRandomTagsName(length, usedNames); // Recursively call for uniqueness\r",
									"  }\r",
									"  usedNames.push(name); // Add the generated name to the used list for future uniqueness checks\r",
									"  return name;\r",
									"}\r",
									"const tagsName = generateUniqueRandomTagsName();\r",
									"pm.collectionVariables.set(\"tagsName\",tagsName)\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//8-  Generate a random Sattus  \r",
									"function generateRandomStatus(availabilityRatio = 0.7) {\r",
									"  // Probability of generating \"available\" based on the ratio\r",
									"  const availableProb = availabilityRatio;\r",
									"\r",
									"  // Generate a random number between 0 and 1\r",
									"  const randomValue = Math.random();\r",
									"\r",
									"  // Return \"available\" based on the probability\r",
									"  return randomValue <= availableProb ? \"available\" : \"not available\";\r",
									"}\r",
									"const Satus = generateRandomStatus();\r",
									"pm.collectionVariables.set(\"status\",Satus)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\"            : {{Petid}},\r\n  \"category\"      : {\r\n    \"id\"          : {{categoryid}},\r\n    \"name\"        : \"{{CategoryName}}\"\r\n  },\r\n  \"name\"          : \"{{PetName}}\",\r\n  \"photoUrls\"     : [\r\n                   \"{{photoUrls}}\"\r\n                          ],\r\n  \"tags\"          : [\r\n                  {\r\n      \"id\"        : {{tagsid}},\r\n      \"name\"      : \"{{tagsName}}\"\r\n    }\r\n  ],\r\n  \"status\"        : \"{{status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v2/pet",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.2 UpdatePet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// 2- Generate a random categoryid  \r",
									"function  generateRandomcategoryid(length = 3, chars = \"0123456789\") {\r",
									"  let result = \"\";\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    result += chars[Math.floor(Math.random() * chars.length)];\r",
									"  }\r",
									"  return result;\r",
									"}\r",
									"const categoryid = generateRandomcategoryid();\r",
									"pm.collectionVariables.set(\"categoryid\",categoryid)\r",
									"\r",
									"\r",
									"\r",
									"//3-  Generate a random category names \r",
									"function generateUniqueRandomString(length = 5, usedNames = [], options = {}) {\r",
									"  // Default options for flexibility\r",
									"  const defaults = {\r",
									"    excludeLetters: \"\", // Letters to exclude (e.g., 'o', 'l')\r",
									"  };\r",
									"  // Merge provided options with defaults\r",
									"  const combinedOptions = { ...defaults, ...options };\r",
									"  // Input validation\r",
									"  if (length < 1) {\r",
									"    throw new Error(\"Length must be at least 1.\");\r",
									"  }\r",
									"  // Create a set of all allowed characters (a-z, excluding specified ones)\r",
									"  const letters = \"abcdefghijklmnopqrstuvwxyz\".split(\"\").filter(\r",
									"    (char) => !combinedOptions.excludeLetters.includes(char)\r",
									"  );\r",
									"  // Function to generate a random character from allowed letters\r",
									"  const getRandomChar = () => letters[Math.floor(Math.random() * letters.length)];\r",
									"  // Generate a random string\r",
									"  let name = \"\";\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    name += getRandomChar();\r",
									"  }\r",
									"  // Keep generating until a unique name is found\r",
									"  while (usedNames.includes(name)) {\r",
									"    name = generateRandomString(length, usedNames); // Recursively call for uniqueness\r",
									"  }\r",
									"  usedNames.push(name); // Add the generated name to the used list for future uniqueness checks\r",
									"  return name;\r",
									"}\r",
									"const CategoryName = generateUniqueRandomString();\r",
									"pm.collectionVariables.set(\"CategoryName\",CategoryName)\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//1- Verify Update Pet sucess with status code 200\r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[1] Verify Update Pet sucess with status code 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 1-  Check ID \r",
									"// Check Id is exist \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[2] Verify  Id is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"    console.log(JSON.parse(responseBody).id);\r",
									"});\r",
									"// Check Id not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[3] Verify Pet Id not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check Id data  type \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[4] Verify Pet ID Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).id); \r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.be.equal(\"number\")\r",
									"});\r",
									"\r",
									"//Check Id value as expected    \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[5] Verify  ID value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).id);\r",
									"    console.log(JSON.parse(request.data).id);\r",
									"    pm.expect( JSON.parse(responseBody).id).to.be.equal(JSON.parse(request.data).id) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// 2- Check category \r",
									"// Check category is exist   \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[6] Verify  category is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"category\")\r",
									"// Check category not null and not undefined\r",
									"}); \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[7] Verify category not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).category).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).category).to.not.be.equal(undefined);\r",
									"    });\r",
									"// Check category data  type\r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[8] Verify Pet ID Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).category); \r",
									"    pm.expect(typeof JSON.parse(responseBody).category).to.be.equal(\"object\")\r",
									"});\r",
									"\r",
									"\r",
									"// 3- Check category Id\r",
									"// Check categoryId is exist \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[9] Verify  categoryId is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.property(\"id\")\r",
									"    console.log(JSON.parse(responseBody).category.id);\r",
									"});\r",
									"// Check categoryId not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[10] Verify category Id not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check categoryId data  type\r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[11] Verify category ID Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).category.id); \r",
									"    pm.expect(typeof JSON.parse(responseBody).category.id).to.be.equal(\"number\")\r",
									"});\r",
									"// Check category Id value as Expected  \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[12] Verify category ID value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).category.id);\r",
									"    console.log(JSON.parse(request.data).category.id);\r",
									"    pm.expect( JSON.parse(responseBody).category.id).to.be.equal(JSON.parse(request.data).category.id) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// 4- Check Category name \r",
									"// Check categoryName is exist \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[13] Verify  categoryName is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.property(\"name\")\r",
									"    console.log(JSON.parse(responseBody).category.name);\r",
									"});\r",
									"// Check categoryName not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[14] Verify category Name not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check categoryName data  type\r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[15] Verify category ID Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).category.name); \r",
									"    pm.expect(typeof JSON.parse(responseBody).category.name).to.be.equal(\"string\")\r",
									"});\r",
									"// Check categoryName value as Expected \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[16] Verify category ID value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).category.name);\r",
									"    console.log(JSON.parse(request.data).category.name);\r",
									"    pm.expect( JSON.parse(responseBody).category.name).to.be.equal(JSON.parse(request.data).category.name) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// 5- Check Pet name \r",
									"// Check PetName is exist \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[17] Verify  PetName is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"name\")\r",
									"\r",
									"});\r",
									"// Check Pet not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[18] Verify Pet Name not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check PetName data  type\r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[19] Verify PetName Type is String \",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).name); \r",
									"    pm.expect(typeof JSON.parse(responseBody).name).to.be.equal(\"string\")\r",
									"});\r",
									"// Check PetName value as Expected \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[20] Verify PetName value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).name);\r",
									"    console.log(JSON.parse(request.data).name);\r",
									"    pm.expect( JSON.parse(responseBody).name).to.be.equal(JSON.parse(request.data).name) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// 6- Check Pet photoUrls \r",
									"// Check PetName is exist \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[21] Verify  photoUrls is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"photoUrls\")\r",
									"\r",
									"});\r",
									"// Check photoUrls not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[22] Verify photoUrls not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).photoUrls).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).photoUrls).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check photoUrls data  type\r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[23] Verify photoUrls Type is String \",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).photoUrls); \r",
									"    pm.expect(typeof JSON.parse(responseBody).photoUrls).to.be.equal(\"object\")\r",
									"});\r",
									"// Check photoUrls value as Expected    Q 1\r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[24] Verify photoUrls value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).photoUrls);\r",
									"    console.log(JSON.parse(request.data).photoUrls);\r",
									"    pm.expect( JSON.parse(responseBody).photoUrls[0]).to.be.equal(JSON.parse(request.data).photoUrls[0]) ;\r",
									"     pm.expect( JSON.parse(responseBody).photoUrls[1]).to.be.equal(JSON.parse(request.data).photoUrls[1]) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// 6- Check Tags  \r",
									"// Check Tags is exist \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[25] Verify  Tags is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"tags\")\r",
									"\r",
									"});\r",
									"// Check tags not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[26] Verify tags not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).tags).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).tags).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check tags data  type\r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[27] Verify tags Type is String \",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).tags); \r",
									"    pm.expect(typeof JSON.parse(responseBody).tags).to.be.equal(\"object\")\r",
									"});\r",
									"\r",
									"// Check tags have Id and Name \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[28] Verify tags have  Id and Name  \",function(){\r",
									"    console.log(JSON.parse(responseBody).tags); \r",
									"   const tags = JSON.parse(responseBody).tags;\r",
									"pm.expect(tags).to.be.an(\"array\");\r",
									"pm.expect(tags.length).to.be.greaterThan(0);\r",
									"pm.expect(tags[0]).to.be.an(\"object\");\r",
									"pm.expect(tags[0]).to.have.property(\"id\");\r",
									"pm.expect(tags[0]).to.have.property(\"name\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// 7- Check Tags Id\r",
									"// Check Tags id is exist \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[29] Verify  tags id  is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0]).to.have.property(\"id\")\r",
									"    console.log(JSON.parse(responseBody).tags[0]);\r",
									"});\r",
									"// Check Tags id not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[30] Verify Tags Id not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check tags  id data  type\r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[31] Verify tags ID Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).tags[0].id); \r",
									"    pm.expect(typeof JSON.parse(responseBody).tags[0].id).to.be.equal(\"number\")\r",
									"});\r",
									"// Check tags Id value as Expected  \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[32] Verify tags ID value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).tags[0].id);\r",
									"    console.log(JSON.parse(request.data).tags[0].id);\r",
									"    pm.expect( JSON.parse(responseBody).tags[0].id).to.be.equal(JSON.parse(request.data).tags[0].id) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// 8- Check Tags name\r",
									"// Check Tags id is exist \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[33] Verify  tags name  is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0]).to.have.property(\"name\")\r",
									"    console.log(JSON.parse(responseBody).tags[0]);\r",
									"});\r",
									"// Check Tags Name not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[34] Verify Tags Name not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check tags  name data  type\r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[35] Verify tags name Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).tags[0].name); \r",
									"    pm.expect(typeof JSON.parse(responseBody).tags[0].name).to.be.equal(\"string\")\r",
									"});\r",
									"// Check tags name value as Expected  \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[36] Verify tags name value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).tags[0].name);\r",
									"    console.log(JSON.parse(request.data).tags[0].name);\r",
									"    pm.expect( JSON.parse(responseBody).tags[0].name).to.be.equal(JSON.parse(request.data).tags[0].name) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// 9- Check Status \r",
									"// Check status  is exist \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[37] Verify Status is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"status\");\r",
									"});\r",
									"// Check Status not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[38] Verify  Status not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check  Status data  type\r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[39] Verify Status Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).status); \r",
									"    pm.expect(typeof JSON.parse(responseBody).status).to.be.equal(\"string\")\r",
									"});\r",
									"// Check Status value as Expected  \r",
									"pm.test(\"[1.Pet].[1.2 UpdatePet].[40] Verify status value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(request.data).status);\r",
									"    pm.expect( JSON.parse(responseBody).status).to.be.equal(JSON.parse(request.data).status) ;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\"            : {{Petid}},\r\n  \"category\"      : {\r\n    \"id\"          : {{categoryid}},\r\n    \"name\"        : \"{{CategoryName}}\"\r\n  },\r\n  \"name\"          : \"{{PetName}}\",\r\n  \"photoUrls\"     : [\r\n                   \"{{photoUrls}}\"\r\n                          ],\r\n  \"tags\"          : [\r\n                  {\r\n      \"id\"        : {{tagsid}},\r\n      \"name\"      : \"{{tagsName}}\"\r\n    }\r\n  ],\r\n  \"status\"        : \"{{status}}\"\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v2/pet/?id={{Petid}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"pet",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{Petid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.3 GetPetByID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// verify Pet data retrived sucess with status code 200\r",
									"pm.test(\" [1.Pet].[1.3 GetPetByID].[1] Verify Pet data retrived sucess with Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   });\r",
									"\r",
									"// 1-  Check ID \r",
									"// Check Id is exist \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[2] Verify  Id is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"});\r",
									"// Check Id not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[3] Verify Pet Id not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check Id data  type \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[4] Verify Pet ID Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).id); \r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.be.equal(\"number\")\r",
									"});\r",
									"\r",
									"//Check Id value as expected    \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[5] Verify  ID value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).id);\r",
									"     const expectedId = parseInt(pm.collectionVariables.get(\"Petid\")); // Convert string to number\r",
									"     console.log(expectedId);\r",
									"    pm.expect( JSON.parse(responseBody).id).to.be.equal(expectedId) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// 2- Check category \r",
									"// Check category is exist   \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[6] Verify  category is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"category\")\r",
									"// Check category not null and not undefined\r",
									"}); \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[7] Verify category not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).category).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).category).to.not.be.equal(undefined);\r",
									"    });\r",
									"// Check category data  type\r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[8] Verify Pet ID Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).category); \r",
									"    pm.expect(typeof JSON.parse(responseBody).category).to.be.equal(\"object\")\r",
									"});\r",
									"\r",
									"\r",
									"// 3- Check category Id\r",
									"// Check categoryId is exist \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[9] Verify  categoryId is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.property(\"id\")\r",
									"    console.log(JSON.parse(responseBody).category.id);\r",
									"});\r",
									"// Check categoryId not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[10] Verify category Id not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check categoryId data  type\r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[11] Verify category ID Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).category.id); \r",
									"    pm.expect(typeof JSON.parse(responseBody).category.id).to.be.equal(\"number\")\r",
									"});\r",
									"// Check category Id value as Expected  \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[12] Verify category ID value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).category.id);\r",
									"    const expectedCategoryid = parseInt(pm.collectionVariables.get(\"categoryid\")); // Convert string to number\r",
									"   console.log(expectedCategoryid);\r",
									"    pm.expect( JSON.parse(responseBody).category.id).to.be.equal(expectedCategoryid) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// 4- Check Category name \r",
									"// Check categoryName is exist \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[13] Verify  categoryName is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.property(\"name\")\r",
									"    console.log(JSON.parse(responseBody).category.name);\r",
									"});\r",
									"// Check categoryName not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[14] Verify category Name not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check categoryName data  type\r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[15] Verify category ID Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).category.name); \r",
									"    pm.expect(typeof JSON.parse(responseBody).category.name).to.be.equal(\"string\")\r",
									"});\r",
									"// Check categoryName value as Expected \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[16] Verify category ID value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).category.name);\r",
									"    const expectedCategoryName = (pm.collectionVariables.get(\"CategoryName\"));\r",
									"  console.log(expectedCategoryName);\r",
									"    pm.expect( JSON.parse(responseBody).category.name).to.be.equal(expectedCategoryName) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// 5- Check Pet name \r",
									"// Check PetName is exist \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[17] Verify  PetName is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"name\")\r",
									"\r",
									"});\r",
									"// Check Pet not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[18] Verify Pet Name not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check PetName data  type\r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[19] Verify PetName Type is String \",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).name); \r",
									"    pm.expect(typeof JSON.parse(responseBody).name).to.be.equal(\"string\")\r",
									"});\r",
									"// Check PetName value as Expected \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[20] Verify PetName value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).name);\r",
									"    const expectedPetName = (pm.collectionVariables.get(\"PetName\")); // Convert string to number\r",
									"     console.log(expectedPetName);\r",
									"    pm.expect( JSON.parse(responseBody).name).to.be.equal(expectedPetName) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// 6- Check Pet photoUrls \r",
									"// Check PetName is exist \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[21] Verify  photoUrls is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"photoUrls\")\r",
									"\r",
									"});\r",
									"// Check photoUrls not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[22] Verify photoUrls not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).photoUrls).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).photoUrls).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check photoUrls data  type\r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[23] Verify photoUrls Type is String \",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).photoUrls); \r",
									"    pm.expect(typeof JSON.parse(responseBody).photoUrls).to.be.equal(\"object\")\r",
									"});\r",
									"// Check photoUrls value as Expected    Q 1\r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[24] Verify photoUrls value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).photoUrls);\r",
									"     const expectedphotoUrls = (pm.collectionVariables.get(\"photoUrls\")); \r",
									"     console.log(expectedphotoUrls);\r",
									"\r",
									"    pm.expect( JSON.parse(responseBody).photoUrls[0]).to.be.equal(expectedphotoUrls) ;\r",
									"     \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// 6- Check Tags  \r",
									"// Check Tags is exist \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[25] Verify  Tags is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"tags\")\r",
									"\r",
									"});\r",
									"// Check tags not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[26] Verify tags not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).tags).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).tags).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check tags data  type\r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[27] Verify tags Type is String \",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).tags); \r",
									"    pm.expect(typeof JSON.parse(responseBody).tags).to.be.equal(\"object\")\r",
									"});\r",
									"\r",
									"// Check tags have Id and Name \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[28] Verify tags have  Id and Name  \",function(){\r",
									"    console.log(JSON.parse(responseBody).tags); \r",
									"   const tags = JSON.parse(responseBody).tags;\r",
									"pm.expect(tags).to.be.an(\"array\");\r",
									"pm.expect(tags.length).to.be.greaterThan(0);\r",
									"pm.expect(tags[0]).to.be.an(\"object\");\r",
									"pm.expect(tags[0]).to.have.property(\"id\");\r",
									"pm.expect(tags[0]).to.have.property(\"name\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// 7- Check Tags Id\r",
									"// Check Tags id is exist \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[29] Verify  tags id  is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0]).to.have.property(\"id\")\r",
									"    console.log(JSON.parse(responseBody).tags[0]);\r",
									"});\r",
									"// Check Tags id not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[30] Verify Tags Id not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check tags  id data  type\r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[31] Verify tags ID Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).tags[0].id); \r",
									"    pm.expect(typeof JSON.parse(responseBody).tags[0].id).to.be.equal(\"number\")\r",
									"});\r",
									"// Check tags Id value as Expected  \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[32] Verify tags ID value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).tags[0].id);\r",
									"   const expectedTagsId = parseInt (pm.collectionVariables.get(\"tagsid\")); \r",
									"     console.log(expectedTagsId);\r",
									"\r",
									"    pm.expect( JSON.parse(responseBody).tags[0].id).to.be.equal(expectedTagsId) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// 8- Check Tags name\r",
									"// Check Tags id is exist \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[33] Verify  tags name  is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0]).to.have.property(\"name\")\r",
									"    console.log(JSON.parse(responseBody).tags[0]);\r",
									"});\r",
									"// Check Tags Name not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[34] Verify Tags Name not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check tags  Name data  type\r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[35] Verify tags Name Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).tags[0].name); \r",
									"    pm.expect(typeof JSON.parse(responseBody).tags[0].name).to.be.equal(\"string\")\r",
									"});\r",
									"// Check tags Name value as Expected  \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[36] Verify tags Name value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).tags[0].name);\r",
									"      const expectedTagsName=  (pm.collectionVariables.get(\"tagsName\")); \r",
									"     console.log(expectedTagsName);\r",
									"    pm.expect( JSON.parse(responseBody).tags[0].name).to.be.equal(expectedTagsName) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// 9- Check Status \r",
									"// Check status  is exist \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[37] Verify Status is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"status\");\r",
									"});\r",
									"// Check Status not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[38] Verify  Status not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check  Status data  type\r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[39] Verify Status Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).status); \r",
									"    pm.expect(typeof JSON.parse(responseBody).status).to.be.equal(\"string\")\r",
									"});\r",
									"// Check Status value as Expected  \r",
									"pm.test(\"[1.Pet].[1.3 GetPetByID].[40] Verify status value as expected\",function()\r",
									"{\r",
									"     const ExpectedStatus=  (pm.collectionVariables.get(\"status\")); \r",
									"     console.log(ExpectedStatus);\r",
									"    pm.expect( JSON.parse(responseBody).status).to.be.equal(ExpectedStatus) ;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v2/pet/{{Petid}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"pet",
								"{{Petid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.4 DeletePet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1- verify status code is 201 ok\r",
									"pm.test(\" [1.Pet].[1.4 deletePet].[1] Verify Pet deleted  sucess with Status code is 201\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   });\r",
									"//2- Verify code Tcs\r",
									"// Check code  is exist \r",
									"pm.test(\"[1.Pet].[1.4 deletePet].[2] Verify code is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\");\r",
									"});\r",
									"// Check code not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.4 deletePet].[3] Verify  code not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check  code data  type\r",
									"pm.test(\"[1.Pet].[1.4 deletePet].[4] Verify code Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).code); \r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal(\"number\")\r",
									"});\r",
									"// Check code value as Expected  \r",
									"pm.test(\"[1.Pet].[1.4 deletePet].[5] Verify code value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).code);\r",
									"     const responseCode = ( JSON.parse(responseBody).code);\r",
									"     const expectedCode = 200;\r",
									"    pm.expect(responseCode).to.be.equal(expectedCode) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//3- Verify Type Tcs\r",
									"// Check type  is exist \r",
									"pm.test(\"[1.Pet].[1.4 deletePet].[6] Verify type is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\");\r",
									"});\r",
									"// Check code not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.4 deletePet].[7] Verify  type not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check  code data  type\r",
									"pm.test(\"[1.Pet].[1.4 deletePet].[8] Verify type Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).type); \r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal(\"string\")\r",
									"});\r",
									"// Check code value as Expected  \r",
									"pm.test(\"[1.Pet].[1.4 deletePet].[9] Verify type value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).code);\r",
									"     const responseCode = ( JSON.parse(responseBody).type);\r",
									"     const expectedCode = \"unknown\";\r",
									"    pm.expect(responseCode).to.be.equal(expectedCode) ;\r",
									"});\r",
									"\r",
									"//2- Verify message Tcs\r",
									"// Check message  is exist \r",
									"pm.test(\"[1.Pet].[1.4 deletePet].[10] Verify message is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\");\r",
									"});\r",
									"// Check message not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.4 deletePet].[11] Verify  message not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check  message data  type\r",
									"pm.test(\"[1.Pet].[1.4 deletePet].[12] Verify message Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).message); \r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal(\"string\")\r",
									"});\r",
									"// Check message value as Expected  \r",
									"pm.test(\"[1.Pet].[1.4 deletePet].[13] Verify message value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).message);\r",
									"     const responseMessage = ( JSON.parse(responseBody).message);\r",
									"     const expectedCode = pm.collectionVariables.get(\"Petid\");\r",
									"    pm.expect(responseMessage).to.be.equal(expectedCode) ;\r",
									"});\r",
									"\r",
									"/* // Verify that the Pet record id not exist after deleted\r",
									"    var Petid = pm.collectionVariables.get(\"Petid\");\r",
									" var baseURL = pm.environment.get(\"baseURL\");\r",
									" const url = `${{baseURL}}/v2/pet/{{Petid}}`; //Construct the URL with the dynamic bookingiD\r",
									" pm.sendRequest(url); // Send the request with the correct URL */\r",
									" \r",
									"\r",
									" pm.test(\"[1.Pet].[1.4 deletePet].[14]Verify this new Pet id not found \"),function(){\r",
									"\r",
									"   pm.expect(JSON.parse(responseBody).to.be.have('1'));\r",
									" }\r",
									" pm.test(\"verify this new Pet id not found  status cod 404 \"),function(){\r",
									"   pm.response.to.have.status(404);\r",
									" }\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v2/pet/{{Petid}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"pet",
								"{{Petid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Store",
			"item": [
				{
					"name": "2.1 Create Order for Pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" // verify Place Order for PetStore sucess  status code is 200 ok\r",
									"pm.test(\" [2.Store].[2.1 Place Order for Pet].[1] Verify Place Order for Pet  sucess with Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   });\r",
									"\r",
									"   \r",
									"// 1-  Check ID \r",
									"// Check Storeid is exist \r",
									"pm.test(\"[2.Store].[2.1 Place Order for Pet].[2] Verify  Storeid is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"    console.log(JSON.parse(responseBody).id);\r",
									"});\r",
									"// Check Storeid not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[3] Verify Storeid not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check Storeid data  type \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[4] Verify Storeid Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).id); \r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.be.equal(\"number\")\r",
									"});\r",
									"\r",
									"//Check Id value as expected    \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[5] Verify  ID value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).id);\r",
									"    console.log(JSON.parse(request.data).id);\r",
									"    pm.expect( JSON.parse(responseBody).id).to.be.equal(JSON.parse(request.data).id) ;\r",
									"});\r",
									"\r",
									"\r",
									"  \r",
									"// 2-  Check PetID \r",
									"// Check Storeid is exist \r",
									"pm.test(\"[2.Store].[2.1 Place Order for Pet].[6] Verify  petId is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"petId\")\r",
									"    console.log(JSON.parse(responseBody).petId);\r",
									"});\r",
									"// Check petId not null and not undefined \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[7] Verify petId not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check petId data  type \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[8] Verify petId Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).petId); \r",
									"    pm.expect(typeof JSON.parse(responseBody).petId).to.be.equal(\"number\")\r",
									"});\r",
									"\r",
									"//Check petId value as expected    \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[9] Verify  ID value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).petId);\r",
									"    console.log(JSON.parse(request.data).petId);\r",
									"    pm.expect( JSON.parse(responseBody).petId).to.be.equal(JSON.parse(request.data).petId) ;\r",
									"});\r",
									"\r",
									"\r",
									" \r",
									"// 3-  Check quantity \r",
									"// Check quantity is exist \r",
									"pm.test(\"[2.Store].[2.1 Place Order for Pet].[10] Verify  quantity is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"quantity\")\r",
									"    console.log(JSON.parse(responseBody).quantity);\r",
									"});\r",
									"// Check quantity not null and not undefined \r",
									"pm.test(\"[2.Store].[2.1 Place Order for Pet].[11] Verify quantity not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).quantity).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).quantity).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check quantity data  type \r",
									"pm.test(\"[2.Store].[2.1 Place Order for Pet].[12] Verify petId Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).quantity); \r",
									"    pm.expect(typeof JSON.parse(responseBody).quantity).to.be.equal(\"number\")\r",
									"});\r",
									"//Check quantity value as expected    \r",
									"pm.test(\"[2.Store].[2.1 Place Order for Pet].[13] Verify  quantity value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).quantity);\r",
									"    console.log(JSON.parse(request.data).quantity);\r",
									"    pm.expect( JSON.parse(responseBody).quantity).to.be.equal(JSON.parse(request.data).quantity) ;\r",
									"});\r",
									"\r",
									"\r",
									"// 4-  Check shipDate \r",
									"// Check shipDate is exist \r",
									"pm.test(\"[2.Store].[2.1 Place Order for Pet].[14] Verify  shipDate is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"shipDate\")\r",
									"    console.log(JSON.parse(responseBody).shipDate);\r",
									"});\r",
									"// Check shipDate not null and not undefined \r",
									"pm.test(\"[2.Store].[2.1 Place Order for Pet].[15] Verify shipDate not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).shipDate).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).shipDate).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check shipDate data  type \r",
									"pm.test(\"[2.Store].[2.1 Place Order for Pet].[16] Verify shipDate Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).shipDate); \r",
									"    pm.expect(typeof JSON.parse(responseBody).shipDate).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"\r",
									"//Check shipDate value as expected    \r",
									"\r",
									"/* \r",
									"pm.test(\"[2.Store].[2.1 Place Order for Pet].[17] Verify shipDate value as expected\", function() {\r",
									"  console.log(JSON.parse(responseBody).shipDate);\r",
									"  console.log(JSON.parse(request.data).shipDate);\r",
									"\r",
									"  // Truncate milliseconds to 6 decimal places in both values before comparing\r",
									"  const expectedDate = new Date(JSON.parse(request.data).shipDate);\r",
									"  expectedDate.setMilliseconds(Math.floor(expectedDate.getMilliseconds() * 1000000) / 1000000); // Truncate to 6 decimals\r",
									"  const actualDate = new Date(JSON.parse(responseBody).shipDate);\r",
									"  actualDate.setMilliseconds(Math.floor(actualDate.getMilliseconds() * 1000000) / 1000000); // Truncate to 6 decimals\r",
									"\r",
									"  pm.expect(actualDate).to.be.equal(expectedDate);\r",
									"});\r",
									"\r",
									" */\r",
									"\r",
									"\r",
									"// 5-  Check status \r",
									"// Check status is exist \r",
									"pm.test(\"[2.Store].[2.1 Place Order for Pet].[18] Verify  status is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"status\")\r",
									"    console.log(JSON.parse(responseBody).status);\r",
									"});\r",
									"// Check status not null and not undefined \r",
									"pm.test(\"[2.Store].[2.1 Place Order for Pet].[19] Verify status not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check status data  type \r",
									"pm.test(\"[2.Store].[2.1 Place Order for Pet].[20] Verify status Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).status); \r",
									"    pm.expect(typeof JSON.parse(responseBody).status).to.be.equal(\"string\")\r",
									"});\r",
									"//Check status value as expected    \r",
									"pm.test(\"[2.Store].[2.1 Place Order for Pet].[21] Verify  status value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).status);\r",
									"    console.log(JSON.parse(request.data).status);\r",
									"    pm.expect( JSON.parse(responseBody).status).to.be.equal(JSON.parse(request.data).status) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// 3-  Check complete \r",
									"// Check complete is exist \r",
									"pm.test(\"[2.Store].[2.1 Place Order for Pet].[22] Verify  complete is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"status\")\r",
									"    console.log(JSON.parse(responseBody).complete);\r",
									"});\r",
									"// Check complete not null and not undefined \r",
									"pm.test(\"[2.Store].[2.1 Place Order for Pet].[23] Verify complete not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).complete).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).complete).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check complete data  type \r",
									"pm.test(\"[2.Store].[2.1 Place Order for Pet].[24] Verify status Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).status); \r",
									"    pm.expect(typeof JSON.parse(responseBody).status).to.be.equal(\"string\")\r",
									"});\r",
									"//Check complete value as expected    \r",
									"pm.test(\"[2.Store].[2.1 Place Order for Pet].[25] Verify  complete value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).complete);\r",
									"    console.log(JSON.parse(request.data).complete);\r",
									"    pm.expect( JSON.parse(responseBody).complete).to.be.equal(JSON.parse(request.data).complete) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									" //1-  Generate a random StoreId number \r",
									"function generatedRandomStoreId(length = 1, chars = \"0123456789\") {\r",
									"  let result = \"\";\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    result += chars[Math.floor(Math.random() * chars.length)];\r",
									"  }\r",
									"  return result;\r",
									"}\r",
									"const RandomStoreId = generatedRandomStoreId();\r",
									"pm.collectionVariables.set(\"Storeid\",RandomStoreId)\r",
									"\r",
									"\r",
									"//2-  Generate a random quantity number \r",
									"function generateRandomquantity(length = 2, chars = \"0123456789\") {\r",
									"  let result = \"\";\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    result += chars[Math.floor(Math.random() * chars.length)];\r",
									"  }\r",
									"  return result;\r",
									"}\r",
									"const Randomquantity = generateRandomquantity();\r",
									"pm.collectionVariables.set(\"quantity\",Randomquantity)\r",
									"\r",
									"\r",
									"\r",
									"\r",
									" // 3-  Generate a random shipDate number \r",
									"function generateRandomshipDate(targetDate = \"2024-02-10T10:22:11.230+0000\", format = \"YYYY-MM-DDThh:mm:ss.SSS+0000\", minOffset = -24 * 60 * 60 * 1000, maxOffset = 24 * 60 * 60 * 1000) {\r",
									"  // Handle potential invalid target date format:\r",
									"  if (!/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}[+\\-]\\d{4}$/.test(targetDate)) {\r",
									"    throw new Error(\"Invalid target date format. Use YYYY-MM-DDThh:mm:ss.SSS+0000 (e.g., 2024-02-10T10:22:11.230+0000).\");\r",
									"  }\r",
									"\r",
									"  // Convert target date to timestamp:\r",
									"  const targetTimestamp = new Date(targetDate).getTime();\r",
									"\r",
									"  // Adjust random offset range if needed (e.g., smaller range for tighter control):\r",
									"  const randomOffset = Math.floor(Math.random() * (maxOffset - minOffset + 1)) + minOffset;\r",
									"\r",
									"  // Generate random timestamp around target date:\r",
									"  const randomTimestamp = targetTimestamp + randomOffset;\r",
									"\r",
									"  // Create date object and format:\r",
									"  const date = new Date(randomTimestamp);\r",
									"  const formattedDate = date.toISOString().replace(/\\.\\d{3}Z$/, `.${date.getMilliseconds().toString().padStart(3, \"0\")}${format.slice(-4)}`);\r",
									"\r",
									"  return formattedDate;\r",
									"}\r",
									"// Example usage in Postman pre-request script:\r",
									"const randomshipDate = generateRandomshipDate();\r",
									"pm.collectionVariables.set(\"shipDate\",randomshipDate)\r",
									"\r",
									"//4- set store status collection variable\r",
									"pm.collectionVariables.set(\"storeStatus\",\"placed\") \r",
									"//5- set complete status collection variable\r",
									"pm.collectionVariables.set(\"completevalue\",\"true\") \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n \"id\": {{Storeid}},\r\n  \"petId\": {{Petid}},\r\n  \"quantity\": {{quantity}},\r\n  \"shipDate\": \"{{shipDate}}\",\r\n  \"status\": \"{{storeStatus}}\",\r\n  \"complete\": {{completevalue}}\r\n}\r\n ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v2/store/order",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"store",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2 Get order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" // verify get store order   sucess wiht  status code is 200 ok\r",
									"pm.test(\" [2 .store].[2.2 Getorder].[1]verify get store order sucess wiht status code is 200 ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   });\r",
									"\r",
									"\r",
									"// 1-  Check ID \r",
									"// Check Id is exist \r",
									"pm.test(\"[2 .store].[2.2 Getorder].[2] Verify Petid is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"    console.log(JSON.parse(responseBody).id);\r",
									"});\r",
									"// Check Id not null and not undefined \r",
									"pm.test(\"[2 .store].[2.2 Getorder].[3] Verify Pet Id not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check Id data  type \r",
									"pm.test(\"[2 .store].[2.2 Getorder].[4] Verify Pet ID Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).id); \r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.be.equal(\"number\")\r",
									"});\r",
									"\r",
									"//Check Id value as expected    \r",
									"pm.test(\"[2 .store].[2.2 Getorder].[5] Verify ID value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).id);\r",
									"    const requestStorid = parseInt (pm.collectionVariables.get(\"Storeid\"));\r",
									"    console.log(requestStorid);\r",
									"    \r",
									"    pm.expect( JSON.parse(responseBody).id).to.be.equal(requestStorid) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"  \r",
									"// 2-  Check PetID \r",
									"// Check Storeid is exist \r",
									"pm.test(\"[2 .store].[2.2 Getorder].[6] Verify  petId is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"petId\")\r",
									"    console.log(JSON.parse(responseBody).petId);\r",
									"});\r",
									"// Check petId not null and not undefined \r",
									"pm.test(\"[2 .store].[2.2 Getorder].[7] Verify petId not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check petId data  type \r",
									"pm.test(\"[2 .store].[2.2 Getorder].[8] Verify petId Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).petId); \r",
									"    pm.expect(typeof JSON.parse(responseBody).petId).to.be.equal(\"number\")\r",
									"});\r",
									"//Check petId value as expected    \r",
									"pm.test(\"[2 .store].[2.2 Getorder].[9] Verify  ID value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).petId);\r",
									"   const requestPetid = parseInt(pm.collectionVariables.get(\"Petid\"));\r",
									"   console.log(requestPetid);\r",
									"    pm.expect( JSON.parse(responseBody).petId).to.be.equal(requestPetid) ;\r",
									"});\r",
									"\r",
									"\r",
									" \r",
									"// 3-  Check quantity \r",
									"// Check quantity is exist \r",
									"pm.test(\"[2.store].[2.2 Getorder].[10] Verify  quantity is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"quantity\")\r",
									"    console.log(JSON.parse(responseBody).quantity);\r",
									"});\r",
									"// Check quantity not null and not undefined \r",
									"pm.test(\"[2.store].[2.2 Getorder].[11] Verify quantity not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).quantity).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).quantity).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check quantity data  type \r",
									"pm.test(\"[2.store].[2.2 Getorder].[12] Verify quantity Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).quantity); \r",
									"    pm.expect(typeof JSON.parse(responseBody).quantity).to.be.equal(\"number\")\r",
									"});\r",
									"//Check quantity value as expected    \r",
									"pm.test(\"[2.Store].[2.2 Getorder].[13] Verify  quantity value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).quantity);\r",
									"    const requestquantity = parseInt(pm.collectionVariables.get(\"quantity\"));\r",
									"    console.log(requestquantity);\r",
									"    pm.expect( JSON.parse(responseBody).quantity).to.be.equal(requestquantity) ;\r",
									"});\r",
									"\r",
									"\r",
									"// 4-  Check shipDate \r",
									"// Check shipDate is exist \r",
									"pm.test(\"[2.Store].[2.2 Getorder].[14] Verify  shipDate is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"shipDate\")\r",
									"    console.log(JSON.parse(responseBody).shipDate);\r",
									"});\r",
									"// Check shipDate not null and not undefined \r",
									"pm.test(\"[2.Store].[2.2 Getorder].[15] Verify shipDate not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).shipDate).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).shipDate).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check shipDate data  type \r",
									"pm.test(\"[2.Store].[2.2 Getorder].[16] Verify shipDate Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).shipDate); \r",
									"    pm.expect(typeof JSON.parse(responseBody).shipDate).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"\r",
									"//Check shipDate value as expected    \r",
									"\r",
									"/* \r",
									"pm.test(\"[2.Store].[2.2 Getorder].[17] Verify shipDate value as expected\", function() {\r",
									"  console.log(JSON.parse(responseBody).shipDate);\r",
									"  console.log(JSON.parse(request.data).shipDate);\r",
									"\r",
									"  // Truncate milliseconds to 6 decimal places in both values before comparing\r",
									"  const expectedDate = new Date(JSON.parse(request.data).shipDate);\r",
									"  expectedDate.setMilliseconds(Math.floor(expectedDate.getMilliseconds() * 1000000) / 1000000); // Truncate to 6 decimals\r",
									"  const actualDate = new Date(JSON.parse(responseBody).shipDate);\r",
									"  actualDate.setMilliseconds(Math.floor(actualDate.getMilliseconds() * 1000000) / 1000000); // Truncate to 6 decimals\r",
									"\r",
									"  pm.expect(actualDate).to.be.equal(expectedDate);\r",
									"}); */\r",
									"\r",
									"\r",
									"// 5-  Check status \r",
									"// Check status is exist \r",
									"pm.test(\"[2.Store].[2.2 Getorder].[18] Verify  status is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"status\")\r",
									"    console.log(JSON.parse(responseBody).status);\r",
									"});\r",
									"// Check status not null and not undefined \r",
									"pm.test(\"[2.Store].[2.2 Getorder].[19] Verify status not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check quantity data  type \r",
									"pm.test(\"[2.Store].[2.2 Getorder].[20] Verify status Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).status); \r",
									"    pm.expect(typeof JSON.parse(responseBody).status).to.be.equal(\"string\")\r",
									"});\r",
									"//Check quantity value as expected    \r",
									"pm.test(\"[2.Store].[2.2 Getorder].[21] Verify  status value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).status);\r",
									"    const requeststatus = (pm.collectionVariables.get(\"storeStatus\"));\r",
									"    console.log(requeststatus);\r",
									"    pm.expect( JSON.parse(responseBody).status).to.be.equal(requeststatus) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// 3-  Check complete \r",
									"// Check complete is exist \r",
									"pm.test(\"[2.Store].[2.2 Getorder].[22] Verify  complete is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"status\")\r",
									"    console.log(JSON.parse(responseBody).complete);\r",
									"});\r",
									"// Check complete not null and not undefined \r",
									"pm.test(\"[2.Store].[2.2 Getorder].[23] Verify complete not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).complete).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).complete).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check complete data  type \r",
									"pm.test(\"[2.Store].[2.2 Getorder].[24] Verify status Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).status); \r",
									"    pm.expect(typeof JSON.parse(responseBody).status).to.be.equal(\"string\")\r",
									"});\r",
									"//Check complete value as expected    \r",
									"pm.test(\"[2.Store].[2.2 Getorder].[25] Verify  complete value as expected\",function()\r",
									"{\r",
									"    console.log(JSON.parse(responseBody).complete);\r",
									"     const requestcompletedBoolean = Boolean(pm.collectionVariables.get(\"completevalue\"));\r",
									"    console.log(requestcompletedBoolean);\r",
									"    pm.expect( JSON.parse(responseBody).complete).to.be.equal(requestcompletedBoolean) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v2/store/order/{{Storeid}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"store",
								"order",
								"{{Storeid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.3 Delete Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//2- Verify code Tcs\r",
									"// Check code  is exist \r",
									"pm.test(\"[2.Store].[2.3 deletePet].[1] Verify code is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\");\r",
									"});\r",
									"// Check code not null and not undefined \r",
									"pm.test(\"[2.Store].[2.3 deletePet].[3] Verify  code not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check  code data  type\r",
									"pm.test(\"[2.Store].[2.3 deletePet].[4] Verify code Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).code); \r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal(\"number\")\r",
									"});\r",
									"// Check code value as Expected  \r",
									"pm.test(\"[2.Store].[2.3 deletePet].[5] Verify code value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).code);\r",
									"     const responseCode = ( JSON.parse(responseBody).code);\r",
									"     const expectedCode = 200;\r",
									"    pm.expect(responseCode).to.be.equal(expectedCode) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//3- Verify Type Tcs\r",
									"// Check type  is exist \r",
									"pm.test(\"[2.Store].[2.3 deletePet].[6] Verify type is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\");\r",
									"});\r",
									"// Check code not null and not undefined \r",
									"pm.test(\"[2.Store].[2.3 deletePet].[7] Verify  type not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check  code data  type\r",
									"pm.test(\"[2.Store].[2.3 deletePet].[8] Verify type Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).type); \r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal(\"string\")\r",
									"});\r",
									"// Check code value as Expected  \r",
									"pm.test(\"[2.Store].[2.3 deletePet].[9] Verify type value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).code);\r",
									"     const responseCode = ( JSON.parse(responseBody).type);\r",
									"     const expectedCode = \"unknown\";\r",
									"    pm.expect(responseCode).to.be.equal(expectedCode) ;\r",
									"});\r",
									"\r",
									"//2- Verify message Tcs\r",
									"// Check message  is exist \r",
									"pm.test(\"[2.Store].[2.3 deletePet].[10] Verify message is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\");\r",
									"});\r",
									"// Check message not null and not undefined \r",
									"pm.test(\"[2.Store].[2.3 deletePet].[11] Verify  message not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check  message data  type\r",
									"pm.test(\"[2.Store].[2.3 deletePet].[12] Verify message Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).message); \r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal(\"string\")\r",
									"});\r",
									"// Check message value as Expected  \r",
									"pm.test(\"[2.Store].[2.3 deletePet].[13] Verify message value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).message);\r",
									"     const responseMessage = ( JSON.parse(responseBody).message);\r",
									"     const expectedCode = pm.collectionVariables.get(\"Storeid\");\r",
									"    pm.expect(responseMessage).to.be.equal(expectedCode) ;\r",
									"});\r",
									"\r",
									"// Verify that the store record id not exist after deleted\r",
									"   /*  var Storeid = pm.collectionVariables.get(\"Storeid\");\r",
									" var baseURL = pm.environment.get(\"baseURL\");\r",
									" const url = `${{baseURL}}/v2/pet/{{Storeid}}`; //Construct the URL with the dynamic bookingiD\r",
									" pm.sendRequest(url); // Send the request with the correct URL */\r",
									" \r",
									" pm.test(\"[2.Store].[2.3 deletePet].[14]Verify this new Store id not found \"),function(){\r",
									"\r",
									"   pm.expect(JSON.parse(responseBody).message).to.be.equal(\"Order Not Found\");\r",
									" }\r",
									" pm.test(\"verify this new store id not found  status cod 404 \"),function(){\r",
									"   pm.response.to.have.status(404);\r",
									" }\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v2/store/order/{{Storeid}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"store",
								"order",
								"{{Storeid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. Users",
			"item": [
				{
					"name": "3.1 Create Users With List Array",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"// 1- generated Random User Id \r",
									"function generateRandomUserId(length = 1) {\r",
									"  // Character set for user IDs\r",
									"  const chars = \"0123456789\";\r",
									"  // Generate random string\r",
									"  let userId = \"\";\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    userId += chars[Math.floor(Math.random() * chars.length)];\r",
									"  }\r",
									"  // Return the generated user ID\r",
									"  return userId;\r",
									"}\r",
									"// Example usage in Postman pre-request script\r",
									"const userid = generateRandomUserId();\r",
									"pm.collectionVariables.set(\"userid\", userid);\r",
									"\r",
									"//2- random UserName \r",
									"function generateRandomUsername(length = 8) {\r",
									"  // Combine all character sets\r",
									"  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
									"  // Generate random username\r",
									"  let username = \"\";\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    username += chars[Math.floor(Math.random() * chars.length)];\r",
									"  }\r",
									"  return username;\r",
									"}\r",
									"// Example usage\r",
									"const randomusername = generateRandomUsername();\r",
									"pm.collectionVariables.set(\"username\", randomusername);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// 3- generated Random first name\r",
									"function generateRandomFirstName(length = 7) {\r",
									"  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"  let name = \"\";\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    name += chars[Math.floor(Math.random() * chars.length)];\r",
									"    if (i === 0) name = name.toUpperCase(); // Capitalize first letter\r",
									"  }\r",
									"  return name;\r",
									"}\r",
									"// Example usage in Postman pre-request script\r",
									"const randomFirstName = generateRandomFirstName();\r",
									"pm.collectionVariables.set(\"firstName\", randomFirstName);\r",
									"\r",
									"\r",
									"// 4- generated Random last name\r",
									"function generateRandomLastName(length = 8) {\r",
									"  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"  let name = \"\";\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    name += chars[Math.floor(Math.random() * chars.length)];\r",
									"    if (i === 0) name = name.toUpperCase(); // Capitalize first letter\r",
									"  }\r",
									"  return name;\r",
									"}\r",
									"// Example usage in Postman pre-request script\r",
									"const randomLastName = generateRandomLastName();\r",
									"pm.collectionVariables.set(\"lastname\", randomLastName);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// 5- generated Random email\r",
									"function generateTestEmail() {\r",
									"  const chars = \"abcdefghijklmnopqrstuvwxyz1234567890\";\r",
									"  let prefix = \"\";\r",
									"  for (let i = 0; i < 6; i++) { // Adjust prefix length as needed\r",
									"    prefix += chars[Math.floor(Math.random() * chars.length)];\r",
									"  }\r",
									"  return `${prefix}@mailinator.com`; // Use your chosen service domain if different\r",
									"}\r",
									"// Example usage in Postman pre-request script\r",
									"const testEmail = generateTestEmail();\r",
									"pm.collectionVariables.set(\"email\", testEmail);\r",
									"\r",
									"\r",
									"\r",
									"// 6- generated Random Password\r",
									"function generateRandomPassword(length = 12) {\r",
									"  // Character set for passwords\r",
									"  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()\";\r",
									"\r",
									"  // Generate random password\r",
									"  let password = \"\";\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    password += chars[Math.floor(Math.random() * chars.length)];\r",
									"  }\r",
									"\r",
									"  return password;\r",
									"}\r",
									"\r",
									"// Example usage in Postman pre-request script\r",
									"const password = generateRandomPassword();\r",
									"pm.collectionVariables.set(\"password\", password);\r",
									"\r",
									"\r",
									"// 7- jenerate random Phone Number \r",
									"function generateRandomPhoneNumber(length = 11) {\r",
									"  // Array representing the possible digits after the first two\r",
									"  const possibleDigits = [1, 2, 0, 5];\r",
									"\r",
									"  // Generate the first two digits (fixed)\r",
									"  let number = \"01\";\r",
									"\r",
									"  // Generate remaining digits randomly from the possible ones\r",
									"  for (let i = 2; i < length; i++) {\r",
									"    number += possibleDigits[Math.floor(Math.random() * possibleDigits.length)];\r",
									"  }\r",
									"\r",
									"  return number;\r",
									"}\r",
									"\r",
									"// Example usage in Postman pre-request script\r",
									"const randomPhoneNum = generateRandomPhoneNumber();\r",
									"pm.collectionVariables.set(\"Phone\", randomPhoneNum);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// 8- generated Random User Status \r",
									"function generateRandomuserStatus(length = 3) {\r",
									"  // Character set for user IDs\r",
									"  const chars = \"0123456789\";\r",
									"  // Generate random string\r",
									"  let userId = \"\";\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    userId += chars[Math.floor(Math.random() * chars.length)];\r",
									"  }\r",
									"  // Return the generated user ID\r",
									"  return userId;\r",
									"}\r",
									"// Example usage in Postman pre-request script\r",
									"const randomuserStatus = generateRandomuserStatus();\r",
									"pm.collectionVariables.set(\"userStatus\", randomuserStatus);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									" // verify Create Users With List Array sucess  status code is 200 ok\r",
									"pm.test(\" [3.Users].[3.1 Create Users With List Array].[1] verify Create Users With List Array sucess  status code is 200 ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   });\r",
									"\r",
									"\r",
									"//2- Verify code Tcs\r",
									"// Check code  is exist \r",
									"pm.test(\"[3.Users].[3.1 Create Users With List Array].[2] Verify code is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\");\r",
									"});\r",
									"// Check code not null and not undefined \r",
									"pm.test(\"[3.Users].[3.1 Create Users With List Array].[3] Verify  code not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check  code data  type\r",
									"pm.test(\"[3.Users].[3.1 Create Users With List Array].[4] Verify code Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).code); \r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal(\"number\")\r",
									"});\r",
									"// Check code value as Expected  \r",
									"pm.test(\"[3.Users].[3.1 Create Users With List Array].[5] Verify code value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).code);\r",
									"     const responseCode = ( JSON.parse(responseBody).code);\r",
									"     const expectedCode = 200;\r",
									"    pm.expect(responseCode).to.be.equal(expectedCode) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//3- Verify Type Tcs\r",
									"// Check type  is exist \r",
									"pm.test(\"[3.Users].[3.1 Create Users With List Array].[6] Verify type is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\");\r",
									"});\r",
									"// Check type not null and not undefined \r",
									"pm.test(\"[3.Users].[3.1 Create Users With List Array].[7] Verify  type not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check  type data  type\r",
									"pm.test(\"[3.Users].[3.1 Create Users With List Array].[8] Verify type Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).type); \r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal(\"string\")\r",
									"});\r",
									"// Check type value as Expected  \r",
									"pm.test(\"[3.Users].[3.1 Create Users With List Array].[9] Verify type value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).code);\r",
									"     const responseCode = ( JSON.parse(responseBody).type);\r",
									"     const expectedCode = \"unknown\";\r",
									"    pm.expect(responseCode).to.be.equal(expectedCode) ;\r",
									"});\r",
									"\r",
									"//4- Verify message Tcs\r",
									"// Check message  is exist \r",
									"pm.test(\"[3.Users].[3.1 Create Users With List Array].[10] Verify message is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\");\r",
									"});\r",
									"// Check message not null and not undefined \r",
									"pm.test(\"[3.Users].[3.1 Create Users With List Array].[11] Verify  message not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check  message data  type\r",
									"pm.test(\"[3.Users].[3.1 Create Users With List Array].[12] Verify message Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).message); \r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal(\"string\")\r",
									"});\r",
									"// Check message value as Expected  \r",
									"pm.test(\"[3.Users].[3.1 Create Users With List Array].[13] Verify message value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).message);\r",
									"     const responseMessage = ( JSON.parse(responseBody).message);\r",
									"    pm.expect(responseMessage).to.be.equal(\"ok\") ;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": {{userid}},\r\n    \"username\": \"{{username}}\",\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastname}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"phone\": \"{{Phone}}\",\r\n    \"userStatus\": {{userStatus}}\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v2/user/createWithArray",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								"createWithArray"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.2 Get User By username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// verify User data retrived sucess with status code 200\r",
									"pm.test(\" [3.Users].[3.2 GetUserByusername].[1]erify User data retrived sucess with status code 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   });\r",
									"\r",
									"// 1-  Check ID \r",
									"// Check Id is exist \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[2] Verify  Id is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"});\r",
									"// Check Id not null and not undefined \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[3] Verify Pet Id not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check Id data  type \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[4] Verify Pet ID Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).id); \r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.be.equal(\"number\")\r",
									"});\r",
									"\r",
									"//Check Id value as expected    \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[5] Verify  ID value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).id);\r",
									"     const expectedId = parseInt(pm.collectionVariables.get(\"userid\")); // Convert string to number\r",
									"     console.log(expectedId);\r",
									"    pm.expect( JSON.parse(responseBody).id).to.be.equal(expectedId) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// 2-  Check username \r",
									"// Check username is exist \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[6] Verify  username is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"username\")\r",
									"});\r",
									"// Check username not null and not undefined \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[7] Verify username d not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).username).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).username).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check username data  type \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[8] Verify username Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).username); \r",
									"    pm.expect(typeof JSON.parse(responseBody).username).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"//Check username value as expected    \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[9] Verify  username value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).id);\r",
									"     const expectedId = (pm.collectionVariables.get(\"username\")); // Convert string to number\r",
									"     console.log(expectedId);\r",
									"    pm.expect( JSON.parse(responseBody).username).to.be.equal(expectedId) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// 3-  Check firstName \r",
									"// Check firstName is exist \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[10] Verify  firstName is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"firstName\")\r",
									"});\r",
									"// Check firstName not null and not undefined \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[11] Verify username d not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).firstName).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).firstName).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check firstName data  type \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[12] Verify firstName Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).username); \r",
									"    pm.expect(typeof JSON.parse(responseBody).username).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"//Check usernafirstName value as expected    \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[13] Verify  firstName value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).id);\r",
									"     const expectedId = (pm.collectionVariables.get(\"firstName\")); // Convert string to number\r",
									"     console.log(expectedId);\r",
									"    pm.expect( JSON.parse(responseBody).firstName).to.be.equal(expectedId) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// 4-  Check lastName \r",
									"// Check lastName is exist \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[14] Verify  firstName is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"lastName\")\r",
									"});\r",
									"// Check lastName not null and not undefined \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[15] Verify lastName  not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).lastName).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).lastName).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check lastName data  type \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[16] Verify lastName Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).lastName); \r",
									"    pm.expect(typeof JSON.parse(responseBody).lastName).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"//Check lastName value as expected    \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[17] Verify  lastName value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).id);\r",
									"     const expectedId = (pm.collectionVariables.get(\"lastname\")); // Convert string to number\r",
									"     console.log(expectedId);\r",
									"    pm.expect( JSON.parse(responseBody).lastName).to.be.equal(expectedId) ;\r",
									"});\r",
									"\r",
									"\r",
									"// 5-  Check email \r",
									"// Check email is exist \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[18] Verify  email is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"email\")\r",
									"});\r",
									"// Check email not null and not undefined \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[19] Verify email  not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).email).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).email).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check email data  type \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[20] Verify email Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).email); \r",
									"    pm.expect(typeof JSON.parse(responseBody).email).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"//Check email value as expected    \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[21] Verify  email value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).id);\r",
									"     const expectedId = (pm.collectionVariables.get(\"email\")); // Convert string to number\r",
									"     console.log(expectedId);\r",
									"    pm.expect( JSON.parse(responseBody).email).to.be.equal(expectedId) ;\r",
									"});\r",
									"\r",
									"\r",
									"// 6-  Check password \r",
									"// Check password is exist \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[22] Verify  password is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"password\")\r",
									"});\r",
									"// Check password not null and not undefined \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[23] Verify email  not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).password).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).password).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check password data  type \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[24] Verify password Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).password); \r",
									"    pm.expect(typeof JSON.parse(responseBody).password).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"//Check password value as expected    \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[25] Verify  password value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).id);\r",
									"     const expectedId = (pm.collectionVariables.get(\"password\")); // Convert string to number\r",
									"     console.log(expectedId);\r",
									"    pm.expect( JSON.parse(responseBody).password).to.be.equal(expectedId) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// 7-  Check phone \r",
									"// Check phone is exist \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[26] Verify  phone is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"phone\")\r",
									"});\r",
									"// Check phone not null and not undefined \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[27] Verify phone  not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).phone).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).phone).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check phone data  type \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[28] Verify pasphoneword Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).phone); \r",
									"    pm.expect(typeof JSON.parse(responseBody).phone).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"//Check phone value as expected    \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[29] Verify  password value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).phone);\r",
									"     const expectedId = (pm.collectionVariables.get(\"Phone\")); // Convert string to number\r",
									"     console.log(expectedId);\r",
									"    pm.expect( JSON.parse(responseBody).phone).to.be.equal(expectedId) ;\r",
									"});\r",
									"\r",
									"\r",
									"// 8-  Check userStatus \r",
									"// Check userStatus is exist \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[30] Verify  userStatus is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"userStatus\")\r",
									"});\r",
									"// Check userStatus not null and not undefined \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[31] Verify userStatus  not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).userStatus).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).userStatus).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check userStatus data  type \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[32] Verify userStatus Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).userStatus); \r",
									"    pm.expect(typeof JSON.parse(responseBody).userStatus).to.be.equal(\"number\")\r",
									"});\r",
									"\r",
									"//Check userStatus value as expected    \r",
									"pm.test(\"[3.Users].[3.2 GetUserByusername].[33] Verify  userStatus value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).phone);\r",
									"     const expectedId = parseInt(pm.collectionVariables.get(\"userStatus\")); // Convert string to number\r",
									"     console.log(expectedId);\r",
									"    pm.expect( JSON.parse(responseBody).userStatus).to.be.equal(expectedId) ;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v2/user/{{username}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								"{{username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.3 Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// verify User data updated sucess with status code 200\r",
									"pm.test(\" [3.Users].[3.2 updateUser].[1]verify User data updated sucess with status code 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   });\r",
									"\r",
									"// 1-  Check code \r",
									"// Check code is exist \r",
									"pm.test(\"[3.Users].[3.2 updateUser].[2] Verify  code is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"// Check code not null and not undefined \r",
									"pm.test(\"[3.Users].[3.2 updateUser].[3] Verify code  not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check code data  type \r",
									"pm.test(\"[3.Users].[3.2 updateUser].[4] Verify code  Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).code); \r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal(\"number\")\r",
									"});\r",
									"\r",
									"//Check code value as expected    \r",
									"pm.test(\"[3.Users].[3.2 updateUser].[5] Verify  code value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).code);\r",
									"     const expectedcode = parseInt(\"200\");\r",
									"     const responscode = (JSON.parse(responseBody).code);\r",
									"    pm.expect(responscode).to.be.equal(expectedcode) ;\r",
									"});\r",
									"\r",
									"//2- Verify Type Tcs\r",
									"// Check type  is exist \r",
									"pm.test(\"[3.Users].[3.2 updateUser].[6] Verify type is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\");\r",
									"});\r",
									"// Check type not null and not undefined \r",
									"pm.test(\"[3.Users].[3.2 updateUser].[7] Verify  type not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check  type data  type\r",
									"pm.test(\"[3.Users].[3.2 updateUser].[8] Verify type Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).type); \r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal(\"string\")\r",
									"});\r",
									"// Check type value as Expected  \r",
									"pm.test(\"[3.Users].[3.2 updateUser].[9] Verify type value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).code);\r",
									"     const responseCode = ( JSON.parse(responseBody).type);\r",
									"     const expectedCode = \"unknown\";\r",
									"    pm.expect(responseCode).to.be.equal(expectedCode) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//3- Verify message Tcs\r",
									"// Check message  is exist \r",
									"pm.test(\"[3.Users].[3.2 updateUser].[10] Verify message is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\");\r",
									"});\r",
									"// Check message not null and not undefined \r",
									"pm.test(\"[3.Users].[3.2 updateUser].[11] Verify  message not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check  message data  type\r",
									"pm.test(\"[3.Users].[3.2 updateUser].[12] Verify message Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).message); \r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal(\"string\")\r",
									"});\r",
									"// Check message value as Expected  \r",
									"pm.test(\"[3.Users].[3.2 updateUser].[13] Verify message value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).message);\r",
									"     const responseMessage = ( JSON.parse(responseBody).message);\r",
									"     const userid  = pm.collectionVariables.get(\"userid\")\r",
									"    pm.expect(responseMessage).to.be.equal(userid) ;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{userid}},\r\n  \"username\": \"{{username}}\",\r\n  \"firstName\": \"{{$randomFileName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"phone\": \"{{$randomPhoneNumber}}\",\r\n  \"userStatus\": {{userStatus}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v2/user/{{username}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								"{{username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.4 Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// verify User  login sucess with status code 200\r",
									"pm.test(\" [3.Users].[3.4 Login].[1] verify User  login sucess with status code 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   });\r",
									"\r",
									"// 1-  Check code \r",
									"// Check code is exist \r",
									"pm.test(\"[3.Users].[3.4 Login].[2] Verify  code is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"// Check code not null and not undefined \r",
									"pm.test(\"[3.Users].[3.4 Login].[3] Verify code  not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check code data  type \r",
									"pm.test(\"[3.Users].[3.4 Login].[4] Verify code  Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).code); \r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal(\"number\")\r",
									"});\r",
									"\r",
									"//Check code value as expected    \r",
									"pm.test(\"[3.Users].[3.4 Login].[5] Verify  code value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).code);\r",
									"     const expectedcode = parseInt(\"200\");\r",
									"     const responscode = (JSON.parse(responseBody).code);\r",
									"    pm.expect(responscode).to.be.equal(expectedcode) ;\r",
									"});\r",
									"\r",
									"//2- Verify Type Tcs\r",
									"// Check type  is exist \r",
									"pm.test(\"[3.Users].[3.4 Login].[6] Verify type is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\");\r",
									"});\r",
									"// Check type not null and not undefined \r",
									"pm.test(\"[3.Users].[3.4 Login].[7] Verify  type not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check  type data  type\r",
									"pm.test(\"[3.Users].[3.4 Login].[8] Verify type Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).type); \r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal(\"string\")\r",
									"});\r",
									"// Check type value as Expected  \r",
									"pm.test(\"[3.Users].[3.4 Login].[9] Verify type value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).code);\r",
									"     const responseCode = ( JSON.parse(responseBody).type);\r",
									"     const expectedCode = \"unknown\";\r",
									"    pm.expect(responseCode).to.be.equal(expectedCode) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//3- Verify message Tcs\r",
									"// Check message  is exist \r",
									"pm.test(\"[3.Users].[3.4 Login].[10] Verify message is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\");\r",
									"});\r",
									"// Check message not null and not undefined \r",
									"pm.test(\"[3.Users].[3.4 Login].[11] Verify  message not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check  message data  type\r",
									"pm.test(\"[3.Users].[3.4 Login].[12] Verify message Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).message); \r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal(\"string\")\r",
									"});\r",
									"// Check message value as Expected  \r",
									"pm.test(\"[3.Users].[3.4 Login].[13] Verify message value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).message);\r",
									"     const responseMessage = ( JSON.parse(responseBody).message);\r",
									"    pm.expect(responseMessage).to.match(/logged in user session:\\d+/);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v2/user/login?username={{username}}&password={{password}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "{{username}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3.5 Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// verify User  delete the user  sucess with status code 200\r",
									"pm.test(\" [3.Users].[3.5 DeleteUser].[1]verify User  delete the user  sucess with status code 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   });\r",
									"\r",
									"// 1-  Check code \r",
									"// Check code is exist \r",
									"pm.test(\"[3.Users].[3.5 DeleteUser].[2] Verify  code is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"// Check code not null and not undefined \r",
									"pm.test(\"[3.Users].[3.5 DeleteUser].[3] Verify code  not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check code data  type \r",
									"pm.test(\"[3.Users].[3.5 DeleteUser].[4] Verify code  Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).code); \r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal(\"number\")\r",
									"});\r",
									"\r",
									"//Check code value as expected    \r",
									"pm.test(\"[3.Users].[3.5 DeleteUser].[5] Verify  code value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).code);\r",
									"     const expectedcode = parseInt(\"200\");\r",
									"     const responscode = (JSON.parse(responseBody).code);\r",
									"    pm.expect(responscode).to.be.equal(expectedcode) ;\r",
									"});\r",
									"\r",
									"//2- Verify Type Tcs\r",
									"// Check type  is exist \r",
									"pm.test(\"[3.Users].[3.5 DeleteUser].[6] Verify type is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\");\r",
									"});\r",
									"// Check type not null and not undefined \r",
									"pm.test(\"[3.Users].[3.5 DeleteUser].[7] Verify  type not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check  type data  type\r",
									"pm.test(\"[3.Users].[3.5 DeleteUser].[8] Verify type Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).type); \r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal(\"string\")\r",
									"});\r",
									"// Check type value as Expected  \r",
									"pm.test(\"[3.Users].[3.5 DeleteUser].[9] Verify type value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).code);\r",
									"     const responseCode = ( JSON.parse(responseBody).type);\r",
									"     const expectedCode = \"unknown\";\r",
									"    pm.expect(responseCode).to.be.equal(expectedCode) ;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//3- Verify message Tcs\r",
									"// Check message  is exist \r",
									"pm.test(\"[3.Users].[3.5 DeleteUser].[10] Verify message is exist on resposeBody\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\");\r",
									"});\r",
									"// Check message not null and not undefined \r",
									"pm.test(\"[3.Users].[3.5 DeleteUser].[11] Verify  message not null or undefined \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.equal(undefined);\r",
									"}); \r",
									"// Check  message data  type\r",
									"pm.test(\"[3.Users].[3.5 DeleteUser].[12] Verify message Type is number\",function(){\r",
									"    console.log(typeof JSON.parse(responseBody).message); \r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal(\"string\")\r",
									"});\r",
									"// Check message value as Expected  \r",
									"pm.test(\"[3.Users].[3.5 DeleteUser].[13] Verify message value as expected\",function()\r",
									"{\r",
									"     console.log(JSON.parse(responseBody).message);\r",
									"     const responseMessage = ( JSON.parse(responseBody).message);\r",
									"     const username  = pm.collectionVariables.get(\"username\")\r",
									"    pm.expect(responseMessage).to.be.equal(username) ;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v2/user/{{username}}?",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								"{{username}}"
							],
							"query": [
								{
									"key": "",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "categoryid",
			"value": ""
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "CategoryName",
			"value": ""
		},
		{
			"key": "PetName",
			"value": ""
		},
		{
			"key": "photoUrls",
			"value": ""
		},
		{
			"key": "tagsid",
			"value": ""
		},
		{
			"key": "tagsName",
			"value": ""
		},
		{
			"key": "status",
			"value": ""
		},
		{
			"key": "Petid",
			"value": ""
		},
		{
			"key": "Storeid",
			"value": ""
		},
		{
			"key": "StoreidStoreid",
			"value": ""
		},
		{
			"key": "quantity",
			"value": ""
		},
		{
			"key": "shipDate",
			"value": ""
		},
		{
			"key": "storeStatus",
			"value": ""
		},
		{
			"key": "completeStatus",
			"value": ""
		},
		{
			"key": "completevalue",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "firstName",
			"value": ""
		},
		{
			"key": "lastName",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "Phone",
			"value": ""
		},
		{
			"key": "userStatus",
			"value": ""
		},
		{
			"key": "userid",
			"value": ""
		},
		{
			"key": "lastname",
			"value": ""
		}
	]
}